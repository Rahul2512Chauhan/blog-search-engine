{
  "title": "Building a Modern Dashboard with Python and Gradio",
  "author": "Thomas Reid",
  "date": "2025-06-04T17:33:11-05:00",
  "content": "The world’s leading publication for data science, AI, and ML professionals.\n\n\t\t\tData insights made simple\t\t\nThis is the second in a short series on developing data dashboards using the latest Python-based GUI development tools, Streamlit, Gradio, and Taipy. \nThe source dataset for each dashboard will be the same, but stored in different formats. As much as possible, I’ll also try to make the actual dashboard layouts for each tool resemble each other and have the same functionality.\nIn the first part of this series, I created a Streamlit version of the dashboard that retrieves its data from a local PostgreSQL database. You can view that article here.\nThis time, we’re exploring the use of the Gradio library.\nThe data for this dashboard will be in a local CSV file, and Pandas will be our primary data processing engine.\nIf you want to see a quick demo of the app, I have deployed it to Hugging Face Spaces. You can run it using the link below, but note that the two input date picker pop-ups do not work due to a known bug in the Hugging Face environment. This is only the case for deployed apps on HF, you can still change the dates manually. Running the app locally works fine and doesn’t have this issue.\n\nDashboard demo on HuggingFace\n\nGradio is an open-source Python package that simplifies the process of building demos or web applications for machine learning models, APIs, or any Python function. With it, you can create demos or web applications without needing JavaScript, CSS, or web hosting experience. By writing just a few lines of Python code, you can unlock the power of Gradio and seamlessly showcase your machine-learning models to a broader audience.\nGradio simplifies the development process by providing an intuitive framework that eliminates the complexities associated with building user interfaces from scratch. Whether you are a machine learning developer, researcher, or enthusiast, Gradio allows you to create beautiful and interactive demos that enhance the understanding and accessibility of your machine learning models.\nThis open-source Python package helps you bridge the gap between your machine learning expertise and a broader audience, making your models accessible and actionable.\nWe’re developing a data dashboard. Our source data will be a single CSV file containing 100,000 synthetic sales records.\nThe actual source of the data isn’t that important. It could just as easily be a text file, an Excel file, SQLite, or any database you can connect to.\nThis is what our final dashboard will look like.\nThere are four main sections.\nUsing the dashboard is easy. Initially, stats for the whole data set are displayed. The user can then narrow the data focus using the three filter fields at the top of the display. The graphs, key metrics, and raw data sections dynamically update to reflect the user’s choices in the filter fields.\nAs mentioned, the dashboard’s source data is contained in a single comma-separated values (CSV) file. The data consists of 100,000 synthetic sales-related records. Here are the first ten records of the file to give you an idea of what it looks like.\nAnd here is some Python code you can use to generate a similar dataset. Ensure that both the NumPy and Pandas libraries are installed first.\nInstalling Gradio is easy using pip, but for coding, the best practice is to set up a separate Python environment for all your work. I use Miniconda for that purpose, but feel free to use whatever method suits your work practice.\nIf you want to go down the conda route and don’t already have it, you must install Miniconda (recommended) or Anaconda first. \nPlease note that, at the time of writing, Gradio needs at least Python 3.8 installed to work correctly.\nOnce the environment is created, switch to it using the ‘activate’ command, and then run ‘pip install’ to install our required Python libraries.\nKey differences between Streamlit and Gradio\nAs I’ll demonstrate in this article, it’s possible to produce very similar data dashboards using Streamlit and Gradio. However, their ethos differs in several key ways.\nFocus\nEase of use\nInteractivity\nCustomization\nDeployment\nUse cases\nStreamlit excels in creating data-centric applications and interactive dashboards for complex projects. Gradio is ideal for quickly showcasing machine learning models and building simpler applications.\nThe Gradio Dashboard Code\nI’ll break down the code into sections and explain each one as we proceed.\nWe begin by importing the required external libraries and loading the full dataset from the CSV file into a Pandas DataFrame.\nNext, we configure a time-to-live cache with a maximum of 128 items and an expiration of 300 seconds. This is used to store the results of expensive function calls and speed up repeated lookups\nThe get_unique_categories function returns a list of unique, cleaned (capitalised) categories from the `csv_data` DataFrame, caching the result for quicker access.\nThe get_date_range function returns the minimum and maximum order dates from the dataset, or None if the data is unavailable.\nThe filter_data function filters the csv_data DataFrame based on a specified date range and optional category, returning the filtered DataFrame.\nThe get_dashboard_stats function retrieves summary metrics — total revenue, total orders, average order value, and top category — for the given filters. Internally it uses filter_data() to scope the dataset and then calculate these key statistics.\nThe get_data_for_table function returns a detailed DataFrame of filtered sales data, sorted by order_id and order_date, including additional revenue for each sale.\nThe get_plot_data function formats data for generating a plot by summing revenue over time, grouped by date.\nThe get_revenue_by_category function aggregates and returns revenue by category, sorted by revenue, within the specified date range and category.\nThe get_top_products function returns the top 10 products by revenue, filtered by date range and category.\nBased on the orientation argument, the create_matplotlib_figure function generates a bar plot from the data and saves it as an image file, either vertical or horizontal.\nThe update_dashboard function retrieves key sales statistics (total revenue, total orders, average order value, and top category) by calling theget_dashboard_stats function. It gathers data for three distinct visualisations (revenue over time, revenue by category, and top products), then uses create_matplotlib_figure to generate plots. It prepares and returns a data table (via the get_data_for_table() function) along with all generated plots and stats so they can be displayed in the dashboard.\nThe create_dashboard function sets the date boundaries (minimum and maximum dates) and establishes the initial default filter values. It uses Gradio to construct a user interface (UI) featuring date pickers, category drop-downs, key metric displays, plot tabs, and a data table. It then wires up the filters so that changing any of them triggers a call to the update_dashboard function, ensuring the dashboard visuals and metrics are always in sync with the selected filters. Finally, it returns the assembled Gradio interface launched as a web application.\nCreate a Python file, e.g. gradio_test.py, and insert all the above code snippets. Save it, and run it like this,\nClick on the local URL shown, and the dashboard will open full screen in your browser.\nThis article provides a comprehensive guide to building an interactive sales performance dashboard using Gradio and a CSV file as its source data.\nGradio is a modern, Python-based open-source framework that simplifies the creation of data-driven dashboards and GUI applications. The dashboard I developed allows users to filter data by date ranges and product categories, view key metrics such as total revenue and top-performing categories, explore visualisations like revenue trends and top products, and navigate through raw data with pagination.\nI also mentioned some key differences between developing visualisation tools using Gradio and Streamlit, another popular front-end Python library.\nThis guide provides a comprehensive implementation of a Gradio data dashboard, covering the entire process from creating sample data to developing Python functions for querying data, generating plots, and handling user input. This step-by-step approach demonstrates how to leverage Gradio’s capabilities to create user-friendly and dynamic dashboards, making it ideal for data engineers and scientists who want to build interactive data applications.\nAlthough I used a CSV file for my data, modifying the code to use another data source, such as a relational database management system (RDBMS) like SQLite, should be straightforward. For example, in my other article in this series on creating a similar dashboard using Streamlit, the data source is a PostgreSQL database.\nWritten By\nTopics:\nShare this article:\nSolving the resource constrained project scheduling problem (RCPSP) with D-Wave’s hybrid constrained quadratic model (CQM) \nDerivation and practical examples of this powerful concept \nThis blog post shares recent papers on out-of-distribution generalization on graph-structured data \nThis article explores the relationship between a movie’s dialogue and its genre, leveraging domain-driven data… \nHow to build penalized quantile regression models (with code!) \nThis is a bit different from what the books say. \nOur weekly selection of must-read Editors’ Picks and original features \nYour home for data science and Al. The world’s leading publication for data science, data analytics, data engineering, machine learning, and artificial intelligence professionals.\nThese cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers whose services we have added to our pages. If you do not allow these cookies then some or all of these services may not function properly.\nThese cookies are necessary for the website to function and cannot be switched off in our systems. They are usually only set in response to actions made by you which amount to a request for services, such as setting your privacy preferences, logging in or filling in forms. You can set your browser to block or alert you about these cookies, but some parts of the site will not then work. These cookies do not store any personally identifiable information.\nThese cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. They help us to know which pages are the most and least popular and see how visitors move around the site. All information these cookies collect is aggregated and therefore anonymous. If you do not allow these cookies we will not know when you have visited our site, and will not be able to monitor its performance.\nThese cookies may be set through our site by our advertising partners. They may be used by those companies to build a profile of your interests and show you relevant adverts on other sites. They do not store directly personal information, but are based on uniquely identifying your browser and internet device. If you do not allow these cookies, you will experience less targeted advertising.\n\nExploring the Proportional Odds Model for Ordinal Logistic Regression | Towards Data Science\nApplications of Density Estimation to Legal Theory | Towards Data Science\nMastering SQL Window Functions | Towards Data Science\nExploratory Data Analysis: Gamma Spectroscopy in Python | Towards Data Science",
  "url": "https://towardsdatascience.com/building-a-modern-dashboard-with-python-and-gradio/"
}