{
  "title": "User Authorisation in Streamlit With OIDC and Google",
  "author": "Thomas Reid",
  "date": "2025-06-12T11:54:07-05:00",
  "content": "The world’s leading publication for data science, AI, and ML professionals.\n\n\t\t\tLog in to a Streamlit app with a Google email account\t\t\nWith the flurry of activity in the AI world over the last few weeks, a recent important announcement by Streamlit that it now supports OpenID Connect (OIDC) login authentication almost passed me by. \nUser authorisation and verification can be a crucial consideration for data scientists, machine learning engineers, and others involved in creating dashboards, machine learning proofs of concept (PoCs), and other applications. Keeping potentially sensitive data private is paramount, so you want to ensure that only authorised users can access your app.\nIn this article, we’ll discuss this new feature of Streamlit and develop a simple app to showcase it. Our app might be simple, but it demonstrates all the key things you need to know when creating more complex software.\nIf you’ve never heard of Streamlit, it’s an open-source Python library designed to build and deploy interactive web applications with minimal code quickly. It is widely used for data visualisation, machine learning model deployment, dashboards, and internal tools. With Streamlit, developers can create web apps using Python without frontend experience in HTML, CSS, or JavaScript. \nIts key features include widgets for user input, built-in caching for performance optimisation, and easy integration with data science libraries like Pandas, Matplotlib, and TensorFlow. Streamlit is particularly popular among data scientists and AI/ML practitioners for sharing insights and models in a web-based interface.\nIf you’d like to learn more about Streamlit, I’ve written a TDS article on using it to create a data dashboard, which you can access using this link.\nOpenID Connect (OIDC) is an authentication protocol that builds upon OAuth 2.0. It allows users to securely sign in to applications using their existing credentials from identity providers like Google, Microsoft, Okta, and Auth0. \nIt enables single sign-on (SSO) and provides user identity information via ID tokens, including email addresses and profile details. Unlike OAuth, which focuses on authorisation, OIDC is designed explicitly for authentication, making it a standard for secure, scalable, and user-friendly login experiences across web and mobile applications.\nIn this article, I’ll show you how to set things up and write code for a Streamlit app that uses OIDC to prompt for your Google email and password. You can use those details to log in to the app and access a second screen that contains an example of a data dashboard.\nAs this article focuses on using Google as an identity provider, if you don’t already have one, you’ll need a Google email address and a Google Cloud account. Once you have your email, sign in to Google Cloud with it using the link below. \nhttps://console.cloud.google.com\nIf you’re worried about the expense of signing up for Google Cloud, don’t be. They offer a free 90-day trial and $300 worth of credits. You only pay for what you use, and you can cancel your Cloud account subscription at any time, before or after your free trial expires. Regardless, what we’ll be doing here should incur no cost. However, I always recommend setting up billing alerts for any cloud provider you sign up for — just in case.\nWe’ll return to what you must do to set up your cloud account later.\nI’m developing using WSL2 Ubuntu Linux on Windows, but the following should also work on regular Windows. Before starting a project like this, I always create a separate Python development environment where I can install any software needed and experiment with coding. Now, anything I do in this environment will be siloed and won’t impact my other projects.\nI use Miniconda for this, but you can use any method that suits you best. If you want to follow the Miniconda route and don’t already have it, you must first install Miniconda. \nNow, you can set up your environment like this.\nThis will be a streamlit app. Initially, there will be a screen which displays the following text,\nAn example Streamlit app showing the use of OIDC and Google email for login authentication\nPlease use the button on the sidebar to log in.\nOn the left sidebar, there will be two buttons. One says Login, and the other says Dashboard.\nIf a user is not logged in, the Dashboard button will be greyed out and unavailable for use. When the user presses the Login button, a screen will be displayed asking the user to log in via Google. Once logged in, two things happen:-\nIf a logged-in user clicks the Logout button, the app resets itself to its initial state.\n\nNB. I have deployed a working version of my app to the Streamlit community cloud. For a sneak preview, click the link below. You may need to “wake up” the app first if no one has clicked on it for a while, but this only takes a few seconds.\nhttps://oidc-example.streamlit.app\n\nTo enable email verification using your Google Gmail account, there are a few things you have to do first on the Google Cloud. They’re pretty straightforward, so take your time and follow each step carefully. I’m assuming you’ve already set up or have a Google email and cloud account, and that you’ll be creating a new project for your work.\nGo to Google Cloud Console and log in. You should see a screen similar to the one shown below.\n\nYou need to set up a project first. Click the Project Picker button. It’s immediately to the right of the Google Cloud logo, near the top left of the screen and will be labelled with the name of one of your existing projects or “Select a project” if you don’t have an existing project. In the pop-up that appears, click the New Project button located at the top right. This will let you insert a project name. Next, click on the Create button. \nOnce that’s done, your new project name will be displayed next to the Google Cloud logo at the top of the screen. Next, click on the hamburger-style menu at the top left of the page.\nDecide which local folder your main Python Streamlit app file will live in. In there, create a file, such as app.py, and insert the following Python code into it.\nThis script builds a two-page Streamlit app with Google (or OIDC) login and a simple dashboard:\n\nIn the same folder where your app.py file lives, create a subfolder called .streamlit. Now go into this new subfolder and create a file called secrets.toml. The Client ID and Client Secret from Google Cloud should be added to that file, along with a redirect URI and cookie secret. Your file should look something like this,\n\nOkay, we should now be able to run our app. To do that, go back to the folder where app.py lives and type this into the command line.\n\nIf all has gone well with your code and set-up, you should see the following screen.\n\n\nNotice that the Dashboard button on the sidebar should be greyed out because you’re not logged in yet. Start by clicking the Login button on the sidebar. You should see the screen below (I’ve obscured my credentials for security reasons),\n\n\nOnce you choose an account and log in, the Streamlit app display will change to this.\n\n\nYou will also notice that the Dashboard button is now clickable, and when you click it, you should see a screen like this.\nFinally, log back out, and the app should return to its initial state.\nIn this article, I explained that proper OIDC authorisation is now available to Streamlit users. This allows you to ensure that anyone using your app is a legitimate user. In addition to Google, you can also use popular providers such as Microsoft, OAuth, Okta, and others.\nI explained what Streamlit was and its uses, and briefly described the OpenID Connect (OIDC) authentication protocol.\nFor my coding example, I focused on using Google as the authenticator and showed you the prerequisite steps to set it up correctly for use on Google’s Cloud platform. \nI also provided a sample Streamlit app that shows Google authorisation in action. Although this is a simple app, it highlights all techniques you require should your needs grow in complexity.\nWritten By\nTopics:\nShare this article:\nDerivation and practical examples of this powerful concept \nHow to build penalized quantile regression models (with code!) \nThis is a bit different from what the books say. \nFabric Madness part 3 \nOur weekly selection of must-read Editors’ Picks and original features \nOur weekly selection of must-read Editors’ Picks and original features \nAnd how I placed top 10% in Europe’s largest machine learning competition with them! \nYour home for data science and Al. The world’s leading publication for data science, data analytics, data engineering, machine learning, and artificial intelligence professionals.\nThese cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers whose services we have added to our pages. If you do not allow these cookies then some or all of these services may not function properly.\nThese cookies are necessary for the website to function and cannot be switched off in our systems. They are usually only set in response to actions made by you which amount to a request for services, such as setting your privacy preferences, logging in or filling in forms. You can set your browser to block or alert you about these cookies, but some parts of the site will not then work. These cookies do not store any personally identifiable information.\nThese cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. They help us to know which pages are the most and least popular and see how visitors move around the site. All information these cookies collect is aggregated and therefore anonymous. If you do not allow these cookies we will not know when you have visited our site, and will not be able to monitor its performance.\nThese cookies may be set through our site by our advertising partners. They may be used by those companies to build a profile of your interests and show you relevant adverts on other sites. They do not store directly personal information, but are based on uniquely identifying your browser and internet device. If you do not allow these cookies, you will experience less targeted advertising.\n\nExploring the Proportional Odds Model for Ordinal Logistic Regression | Towards Data Science\nApplications of Density Estimation to Legal Theory | Towards Data Science\nMastering SQL Window Functions | Towards Data Science\nExploratory Data Analysis: Gamma Spectroscopy in Python | Towards Data Science",
  "url": "https://towardsdatascience.com/user-authorisation-in-streamlit-with-oidc-and-google/"
}